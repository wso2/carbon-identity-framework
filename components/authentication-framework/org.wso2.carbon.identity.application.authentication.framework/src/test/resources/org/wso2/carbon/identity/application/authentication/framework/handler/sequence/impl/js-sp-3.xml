<!--
  ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
<ServiceProvider>
    <ApplicationID>1</ApplicationID>
    <ApplicationName>default</ApplicationName>
    <Description>Default Service Provider</Description>
    <InboundAuthenticationConfig>
        <InboundAuthenticationRequestConfigs>
            <InboundAuthenticationRequestConfig>
                <InboundAuthKey>default</InboundAuthKey>
                <InboundAuthType></InboundAuthType>
                <Properties></Properties>
            </InboundAuthenticationRequestConfig>
        </InboundAuthenticationRequestConfigs>
    </InboundAuthenticationConfig>
    <LocalAndOutBoundAuthenticationConfig>
        <AuthenticationSteps>
            <AuthenticationStep>
                <StepOrder>1</StepOrder>
                <LocalAuthenticatorConfigs>
                    <LocalAuthenticatorConfig>
                        <Name>BasicMockAuthenticator</Name>
                        <DisplayName>basicauth</DisplayName>
                        <IsEnabled>true</IsEnabled>
                    </LocalAuthenticatorConfig>
                </LocalAuthenticatorConfigs>
                <SubjectStep>true</SubjectStep>
                <AttributeStep>true</AttributeStep>
            </AuthenticationStep>
            <AuthenticationStep>
                <StepOrder>2</StepOrder>
                <FederatedIdentityProviders>
                    <IdentityProvider>
                        <IdentityProviderName>HwkMockAuthenticator</IdentityProviderName>
                        <IsEnabled>true</IsEnabled>
                        <DefaultAuthenticatorConfig>HwkMockAuthenticator</DefaultAuthenticatorConfig>
                        <FederatedAuthenticatorConfigs>
                            <FederatedAuthenticatorConfig>
                                <Name>HwkMockAuthenticator</Name>
                                <IsEnabled>true</IsEnabled>
                            </FederatedAuthenticatorConfig>
                        </FederatedAuthenticatorConfigs>
                    </IdentityProvider>
                </FederatedIdentityProviders>
                <SubjectStep>false</SubjectStep>
                <AttributeStep>false</AttributeStep>
            </AuthenticationStep>
            <AuthenticationStep>
                <StepOrder>3</StepOrder>
                <FederatedIdentityProviders>
                    <IdentityProvider>
                        <IdentityProviderName>FptMockAuthenticator</IdentityProviderName>
                        <IsEnabled>true</IsEnabled>
                        <DefaultAuthenticatorConfig>FptMockAuthenticator</DefaultAuthenticatorConfig>
                        <FederatedAuthenticatorConfigs>
                            <FederatedAuthenticatorConfig>
                                <Name>FptMockAuthenticator</Name>
                                <IsEnabled>true</IsEnabled>
                            </FederatedAuthenticatorConfig>
                        </FederatedAuthenticatorConfigs>
                    </IdentityProvider>
                </FederatedIdentityProviders>
                <SubjectStep>false</SubjectStep>
                <AttributeStep>false</AttributeStep>
            </AuthenticationStep>
        </AuthenticationSteps>
        <AuthenticationScript type="application/javascript" enabled="true"><![CDATA[

var onLoginRequest = function(context) {

    var variable1 = 'internal_val_1';
    variable2 = 'internal_val_2';
    fn2 = function (ctx, s) {
        Log.info('Some Function prints and return '+s);
        return true;
    }
    executeStep(1, {
        onSuccess : function(context) {
            //Log.info('VA1 '+variable1);
            Log.info('VA2 '+variable2);
            var isAdmin = fn2(context, 'admin');
            Log.info("--------------- Has Admin " + isAdmin);
            if (isAdmin) {
                executeStep(2);
            }
        }

    });
};
]]></AuthenticationScript>
        <AuthenticationType>flow</AuthenticationType>
    </LocalAndOutBoundAuthenticationConfig>
    <RequestPathAuthenticatorConfigs></RequestPathAuthenticatorConfigs>
    <InboundProvisioningConfig></InboundProvisioningConfig>
    <OutboundProvisioningConfig></OutboundProvisioningConfig>
    <ClaimConfig>
        <AlwaysSendMappedLocalSubjectId>true</AlwaysSendMappedLocalSubjectId>
    </ClaimConfig>
    <PermissionAndRoleConfig></PermissionAndRoleConfig>
</ServiceProvider>
