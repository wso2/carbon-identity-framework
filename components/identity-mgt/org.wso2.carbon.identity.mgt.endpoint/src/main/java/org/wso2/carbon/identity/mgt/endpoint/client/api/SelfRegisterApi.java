/**
 * WSO2 Identity Server Rest API - User
 * This document specifies a **RESTful API** for WSO2 **Identity Server** .  It is written with [swagger 2](http://swagger.io/).
 * <p/>
 * OpenAPI spec version: 0.9.0
 * Contact: architecture@wso2.com
 * <p/>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p/>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.wso2.carbon.identity.mgt.endpoint.client.api;

import com.sun.jersey.api.client.GenericType;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.base.MultitenantConstants;
import org.wso2.carbon.identity.mgt.endpoint.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.mgt.endpoint.IdentityManagementServiceUtil;
import org.wso2.carbon.identity.mgt.endpoint.client.ApiClient;
import org.wso2.carbon.identity.mgt.endpoint.client.ApiException;
import org.wso2.carbon.identity.mgt.endpoint.client.Configuration;
import org.wso2.carbon.identity.mgt.endpoint.client.Pair;
import org.wso2.carbon.identity.mgt.endpoint.client.model.CodeValidationRequest;
import org.wso2.carbon.identity.mgt.endpoint.client.model.Property;
import org.wso2.carbon.identity.mgt.endpoint.client.model.ResendCodeRequest;
import org.wso2.carbon.identity.mgt.endpoint.client.model.SelfUserRegistrationRequest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SelfRegisterApi {

    String basePath = IdentityManagementServiceUtil.getInstance().getServiceContextURL()
            .replace(IdentityManagementEndpointConstants.UserInfoRecovery.SERVICE_CONTEXT_URL_DOMAIN,
                    "api/identity/user/v1.0");
    private ApiClient apiClient;

    public SelfRegisterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SelfRegisterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * This API is used to user self registration.
     *
     * @param user It can be sent optional property parameters over email based on email template. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String mePostCall(SelfUserRegistrationRequest user, Map<String, String> headers) throws ApiException {
        Object localVarPostBody = user;

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException(400, "Missing the required parameter 'user' when calling mePost");
        }

        String tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
        if (StringUtils.isNotBlank(user.getUser().getTenantDomain())) {
            tenantDomain = user.getUser().getTenantDomain();
        }

        if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {
            basePath = IdentityManagementServiceUtil.getInstance().getServiceContextURL()
                    .replace(IdentityManagementEndpointConstants.UserInfoRecovery.SERVICE_CONTEXT_URL_DOMAIN,
                            "t/"+tenantDomain+"/api/identity/user/v1.0");
        }
        apiClient.setBasePath(basePath);

        // create path and map variables
        String localVarPath = "/me".replaceAll("\\{format\\}", "json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<>();

        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};

        GenericType<String> localVarReturnType = new GenericType<String>() {
        };

        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);

    }

    /**
     * This API is used to resend confirmation code, if it is missing.
     *
     * @param user It can be sent optional property parameters over email based on email template. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String resendCodePostCall(ResendCodeRequest user) throws ApiException {
        Object localVarPostBody = user;

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException(400, "Missing the required parameter 'user' when calling resendCodePost(Async)");
        }

        String tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
        if (StringUtils.isNotBlank(user.getUser().getTenantDomain())) {
            tenantDomain = user.getUser().getTenantDomain();
        }

        if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {
            basePath = IdentityManagementServiceUtil.getInstance().getServiceContextURL()
                    .replace(IdentityManagementEndpointConstants.UserInfoRecovery.SERVICE_CONTEXT_URL_DOMAIN,
                            "t/"+tenantDomain+"/api/identity/user/v1.0");
        }

        apiClient.setBasePath(basePath);


        // create path and map variables
        String localVarPath = "/resend-code".replaceAll("\\{format\\}", "json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);


        String[] localVarAuthNames = new String[]{};

        GenericType<String> localVarReturnType = new GenericType<String>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * This API is used to validate code of self reigstered users
     *
     * @param code Code retried after user self registration and optional property parameters (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void validateCodePostCall(CodeValidationRequest code) throws ApiException {
        Object localVarPostBody = code;

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException(400, "Missing the required parameter 'code' when calling validateCodePost(Async)");
        }

        String tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
        List<Property> properties = code.getProperties();
        for (Property property : properties) {
            if (StringUtils.isNotEmpty(property.getKey()) && MultitenantConstants.TENANT_DOMAIN
                    .equals(property.getKey())) {
                tenantDomain = property.getValue();
            }
        }

        if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {
            basePath = IdentityManagementServiceUtil.getInstance().getServiceContextURL()
                    .replace(IdentityManagementEndpointConstants.UserInfoRecovery.SERVICE_CONTEXT_URL_DOMAIN,
                            "t/" + tenantDomain + "/api/identity/user/v1.0");
        }

        apiClient.setBasePath(basePath);

        // create path and map variables
        String localVarPath = "/validate-code".replaceAll("\\{format\\}", "json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);


        String[] localVarAuthNames = new String[]{};
        GenericType<String> localVarReturnType = new GenericType<String>() {
        };
        apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }
}
