{
  "category": "Environment Based",
  "name": "IP Based",
  "img": "./images/environment.png",
  "code": [
    "/*",
    "This template shows how to extract IP address from the request and manipulate the authentication flow if",
    "the user logs in from an IP address outside the company network",
    "*/",
    "function onInitialRequest(context) {",
    "    executeStep(1, {",
    "        onSuccess: function (context) {",
    "            var corpNetwork = '192.168.8.0/22';",
    "            var user = context.steps[1].subject;",
    "            // Extracting the origin IP of the request",
    "            var loginIp = context.request.ip;",
    "",
    "            Log.info('User: ' + user.username + ' logged in from IP: ' + loginIp);",
    "",
    "            // Checking if the IP is within the allowed range",
    "            if (!isCorporateIP(loginIp, corpNetwork)) {",
    "                executeStep(2);",
    "            }",
    "        }",
    "    });",
    "}",
    "",
    "// Vanilla javascript function to convert ip address string to long value",
    "function convertIpToLong(ip) {",
    "    var components = ip.split('.');",
    "    if (components) {",
    "        var ipAddr = 0, pow = 1;",
    "        for (var i = 3; i >= 0; i -= 1) {",
    "            ipAddr += pow * parseInt(components[i]);",
    "            pow *= 256;",
    "        }",
    "        return ipAddr;",
    "    } else {",
    "        return -1;",
    "    }",
    "}",
    "",
    "// Vanilla javascript function to check if the ip address is within the given subnet",
    "function isCorporateIP(ip, subnet) {",
    "    var components = subnet.split('/');",
    "    var minHost = convertIpToLong(components[0]);",
    "    var ipAddr = convertIpToLong(ip);",
    "    var mask = components[1];",
    "    if (components && minHost >= 0) {",
    "        var numHosts = Math.pow(2, 32 - parseInt(mask));",
    "        return (ipAddr >= minHost) && (ipAddr <= minHost + numHosts - 1);",
    "    } else {",
    "        return false;",
    "    }",
    "}"
  ],
  "help": "Enforcing second authentication step if the user logs from an IP outside the corporate network",
  "helpLink": "https://docs.wso2.com/display/IS560/Conditional+Authentication"
}
