DROP PROCEDURE IF EXISTS `WSO2_CONFIRMATION_CODE_CLEANUP`;

DELIMITER $$

CREATE PROCEDURE `WSO2_CONFIRMATION_CODE_CLEANUP`()
BEGIN

-- ------------------------------------------
-- DECLARE VARIABLES
-- ------------------------------------------
DECLARE batchSize INT;
DECLARE chunkSize INT;
DECLARE sleepTime FLOAT;
DECLARE checkCount INT;
DECLARE enableLog BOOLEAN;
DECLARE backupTables BOOLEAN;
DECLARE logLevel VARCHAR(10);
DECLARE rowCount INT;
DECLARE cleaupCount INT;

-- ------------------------------------------
-- CONFIGURABLE VARIABLES
-- ------------------------------------------

SET batchSize = 10000;      -- SET BATCH SIZE FOR AVOID TABLE LOCKS    [DEFAULT : 10000]
SET chunkSize = 500000;    -- SET TEMP TABLE CHUNK SIZE FOR AVOID TABLE LOCKS    [DEFAULT : 500000]
SET sleepTime = 2;          -- Sleep time in seconds.[DEFAULT : 2] 
SET checkCount = 1000; -- SET CHECK COUNT FOR FINISH CLEANUP SCRIPT (CLEANUP ELIGIBLE COUNT SHOULD BE HIGHER THAN checkCount TO CONTINUE) [DEFAULT : 1000]
SET enableLog = FALSE;	-- SET TRUE IF TRACE LOGGING IS ENABLED [DEFAULT : FALSE]
SET backupTables = FALSE;    -- SET TRUE IF REG PROPROTIES TO BACKUP BEFORE DELETE [DEFAULT : FASLE].
SET logLevel = 'DEBUG';    -- SET LOG LEVELS : INFO, TRACE , DEBUG
SET rowCount=0;	
SET autocommit = 0;
SET @OLD_SQL_SAFE_UPDATES = @@SQL_SAFE_UPDATES;
SET SQL_SAFE_UPDATES = 0;

SELECT 'INFO : WSO2_CONFIRMATION_CODE_CLEANUP() STARTED .... !';


IF (backupTables)
THEN
    IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'REG_RESOURCE_PROPERTY_BACKUP' and TABLE_SCHEMA in (SELECT DATABASE())))
    THEN
        IF (enableLog AND logLevel IN ('TRACE')) THEN
        SELECT 'TRACE : CREATING BACKUP TABLE REG_RESOURCE_PROPERTY_BACKUP .. !';
        END IF;
        CREATE TABLE REG_RESOURCE_PROPERTY_BACKUP SELECT * FROM REG_RESOURCE_PROPERTY WHERE 1 = 2;
    ELSE
        IF (enableLog AND logLevel IN ('TRACE')) THEN
        SELECT 'TRACR :USING PREVIOUS BACKUP TABLE REG_RESOURCE_PROPERTY_BACKUP ..!';
        END IF;
    END IF;

    IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'REG_PROPERTY_BACKUP' and TABLE_SCHEMA in (SELECT DATABASE())))
    THEN
        IF (enableLog AND logLevel IN ('TRACE')) THEN
        SELECT 'TRACE : CREATING BACKUP TABLE REG_PROPERTY .. !';
        END IF;
        CREATE TABLE REG_PROPERTY_BACKUP SELECT * FROM REG_PROPERTY WHERE 1 = 2;
    ELSE
        IF (enableLog AND logLevel IN ('TRACE')) THEN
        SELECT 'TRACE :USING PREVIOUS BACKUP TABLE REG_PROPERTY_BACKUP ..!';
        END IF;
    END IF;

        IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'REG_RESOURCE_BACKUP' and TABLE_SCHEMA in (SELECT DATABASE())))
    THEN
        IF (enableLog AND logLevel IN ('TRACE')) THEN
        SELECT 'TRACE : CREATING BACKUP TABLE REG_RESOURCE .. !';
        END IF;
        CREATE TABLE REG_RESOURCE_BACKUP SELECT * FROM REG_RESOURCE WHERE 1 = 2;
    ELSE
        IF (enableLog AND logLevel IN ('TRACE')) THEN
        SELECT 'TRACE :USING PREVIOUS BACKUP TABLE REG_RESOURCE_BACKUP ..!';
        END IF;
    END IF;
END IF;


-- ------------------------------------------------------
-- CALCULATING REG_RESOURCE
-- ------------------------------------------------------
IF (enableLog)
THEN
    SELECT 'INFO : CALCULATING DELETE ELIGIBLE ON REG_RESOURCE TABLE .... !';

    IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
    THEN
    SELECT  COUNT(1) into rowcount FROM REG_RESOURCE;
    SELECT 'DEBUG : TOTAL REG_RESOURCE TABLE BEFORE DELETE ', rowcount;
    END IF;

    IF (enableLog AND logLevel IN ('TRACE'))
    THEN
    SELECT COUNT(1) into cleaupCount FROM REG_RESOURCE
			JOIN
		REG_PATH
	WHERE
		REG_RESOURCE.REG_PATH_ID = REG_PATH.REG_PATH_ID
		AND REG_PATH.REG_PATH_VALUE = '/_system/config/repository/components/org.wso2.carbon.identity.mgt/data'
		AND REG_VERSION IN (SELECT
			REG_VERSION
		FROM
			REG_RESOURCE_PROPERTY
				JOIN
			REG_PROPERTY
		WHERE
			REG_RESOURCE_PROPERTY.REG_PROPERTY_ID = REG_PROPERTY.REG_ID
			AND REG_PROPERTY.REG_NAME = 'expireTime'
			AND REG_PROPERTY.REG_VALUE / 1000 < UNIX_TIMESTAMP());
    SELECT 'TRACE : TOTAL REG_RESOURCE SHOULD BE DELETED ON ', cleaupCount;
    END IF;

    IF (enableLog AND logLevel IN ('TRACE'))
    THEN
    SET rowcount  = (rowcount - cleaupCount);
    SELECT 'TRACE : TOTAL REG_RESOURCE SHOULD BE RETAIN ', rowcount;
    END IF;
END IF;

-- ------------------------------------------
-- PURGE REG_RESOURCE
-- ------------------------------------------

-- RUN UNTILL 
RR_CHUNK_LOOP: REPEAT

DROP TABLE IF EXISTS REG_RESOURCE_CHUNK_TMP;

CREATE TABLE REG_RESOURCE_CHUNK_TMP SELECT REG_VERSION
	FROM REG_RESOURCE
			JOIN
		REG_PATH
	WHERE
		REG_RESOURCE.REG_PATH_ID = REG_PATH.REG_PATH_ID
		AND REG_PATH.REG_PATH_VALUE = '/_system/config/repository/components/org.wso2.carbon.identity.mgt/data'
		AND REG_VERSION IN (SELECT
			REG_VERSION
		FROM
			REG_RESOURCE_PROPERTY
				JOIN
			REG_PROPERTY
		WHERE
			REG_RESOURCE_PROPERTY.REG_PROPERTY_ID = REG_PROPERTY.REG_ID
			AND REG_PROPERTY.REG_NAME = 'expireTime'
			AND REG_PROPERTY.REG_VALUE / 1000 < UNIX_TIMESTAMP()) LIMIT chunkSize ;

SELECT row_count() INTO @chunkCount;

IF (@chunkCount<checkCount OR @chunkCount=0)
THEN
IF (@chunkCount<checkCount)
THEN
SELECT 'INFO : EXIT LOOP HENCE DELETE ELIGIBLE COUNT IS LESS THAN CHECK_COUNT DEFINED ', @chunkCount AS 'DELETE ELIGIBLE' , checkCount  AS 'CHECK_COUNT' ;
END IF;
LEAVE RR_CHUNK_LOOP;
END IF;

IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
THEN
SELECT 'DEBUG : REG_RESOURCE_CHUNK_TMP TABLE CREATED WITH ', @chunkCount ;
END IF;

CREATE INDEX REG_RESOURCE_CHUNK_TMP_INDX on REG_RESOURCE_CHUNK_TMP (REG_VERSION);

COMMIT;

        RR_BATCH_LOOP: REPEAT

		DROP TABLE IF EXISTS REG_RESOURCE_BATCH_TMP;
        
        CREATE TABLE REG_RESOURCE_BATCH_TMP SELECT REG_VERSION FROM REG_RESOURCE_CHUNK_TMP LIMIT batchSize;

        SELECT row_count() INTO @batchCount;
        
		IF (@batchCount=0 )
        THEN
        LEAVE RR_BATCH_LOOP;
        END IF;

        IF (backupTables)
        THEN
        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : BACKING UP TABLES REG_RESOURCE_BACKUP' ;
        END IF;
        INSERT INTO REG_RESOURCE_BACKUP SELECT RGRP.* FROM  REG_RESOURCE AS RGRP INNER JOIN  REG_RESOURCE_BATCH_TMP AS CHK WHERE RGRP.REG_VERSION = CHK.REG_VERSION;
        COMMIT;
        END IF;

        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : BATCH DELETE STARTED ON REG_RESOURCE :',  @batchCount;
        END IF;

        DELETE A
        FROM REG_RESOURCE AS A
        INNER JOIN REG_RESOURCE_BATCH_TMP AS B
        ON A.REG_VERSION = B.REG_VERSION;
	
        SELECT row_count() INTO rowCount;
		COMMIT;
        IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
        THEN
        SELECT 'DEBUG : BATCH DELETE FINISHED ON REG_RESOURCE :', rowCount;
        END IF;

        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : BATCH DELETE STARTED ON REG_RESOURCE_CHUNK_TMP :',  @batchCount;
        END IF;

        DELETE A
        FROM REG_RESOURCE_CHUNK_TMP AS A
        INNER JOIN REG_RESOURCE_BATCH_TMP AS B
        ON A.REG_VERSION = B.REG_VERSION;
		COMMIT;
        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : BATCH DELETE FINISHED ON REG_RESOURCE_CHUNK_TMP :';
        END IF;

        IF ((rowCount > 0))
        THEN
            IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : SLEEPING FOR SECONDS :',  sleepTime;
        END IF;
        DO SLEEP(sleepTime);
        END IF;

        UNTIL @batchCount=0 END REPEAT;

UNTIL @chunkCount=0 END REPEAT;


-- ------------------------------------------------------
-- CALCULATING REG_RESOURCE_PROPERTY
-- ------------------------------------------------------
IF (enableLog)
THEN
    SELECT 'INFO : CALCULATING DELETE ELIGIBLE ON REG_RESOURCE_PROPERTY TABLE .... !';

    IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
    THEN
    SELECT  COUNT(1) into rowcount FROM REG_RESOURCE_PROPERTY;
    SELECT 'DEBUG : TOTAL REG_RESOURCE_PROPERTY TABLE BEFORE DELETE ', rowcount;
    END IF;

    IF (enableLog AND logLevel IN ('TRACE'))
    THEN
    SELECT COUNT(1) into cleaupCount FROM REG_RESOURCE_PROPERTY WHERE REG_PROPERTY_ID NOT IN (
    SELECT REG_PROPERTY_ID FROM REG_RESOURCE_PROPERTY INNER JOIN REG_RESOURCE ON REG_RESOURCE_PROPERTY.REG_PATH_ID = REG_RESOURCE.REG_PATH_ID 
    UNION 
    SELECT REG_PROPERTY_ID FROM REG_RESOURCE_PROPERTY INNER JOIN REG_RESOURCE ON REG_RESOURCE_PROPERTY.REG_VERSION = REG_RESOURCE.REG_VERSION );
    SELECT 'TRACE : TOTAL REG_RESOURCE_PROPERTY SHOULD BE DELETED ON ', cleaupCount;
    END IF;

    IF (enableLog AND logLevel IN ('TRACE'))
    THEN
    SET rowcount  = (rowcount - cleaupCount);
    SELECT 'TRACE : TOTAL REG_RESOURCE_PROPERTY SHOULD BE RETAIN ', rowcount;
    END IF;
END IF;

-- ------------------------------------------
-- PURGE REG_RESOURCE_PROPERTY
-- ------------------------------------------

-- RUN UNTILL 
RRP_CHUNK_LOOP: REPEAT

DROP TABLE IF EXISTS REG_RESOURCE_PROPERTY_CHUNK_TMP;

CREATE TABLE REG_RESOURCE_PROPERTY_CHUNK_TMP SELECT REG_PROPERTY_ID FROM REG_RESOURCE_PROPERTY WHERE REG_PROPERTY_ID NOT IN (
SELECT REG_PROPERTY_ID FROM REG_RESOURCE_PROPERTY INNER JOIN REG_RESOURCE ON REG_RESOURCE_PROPERTY.REG_PATH_ID = REG_RESOURCE.REG_PATH_ID 
UNION 
SELECT REG_PROPERTY_ID FROM REG_RESOURCE_PROPERTY INNER JOIN REG_RESOURCE ON REG_RESOURCE_PROPERTY.REG_VERSION = REG_RESOURCE.REG_VERSION ) LIMIT chunkSize ;

SELECT row_count() INTO @chunkCount;

IF (@chunkCount<checkCount OR @chunkCount=0)
THEN
IF (@chunkCount<checkCount)
THEN
SELECT 'INFO : EXIT LOOP HENCE DELETE ELIGIBLE COUNT IS LESS THAN CHECK_COUNT DEFINED ', @chunkCount AS 'DELETE ELIGIBLE' , checkCount  AS 'CHECK_COUNT' ;
END IF;
LEAVE RRP_CHUNK_LOOP;
END IF;



IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
THEN
SELECT 'DEBUG : REG_RESOURCE_PROPERTY_CHUNK_TMP TABLE CREATED WITH ', @chunkCount ;
END IF;

CREATE INDEX REG_RESOURCE_PROPERTY_CHUNK_TMP_INDX on REG_RESOURCE_PROPERTY_CHUNK_TMP (REG_PROPERTY_ID);

COMMIT;

        RRP_BATCH_LOOP: REPEAT

		DROP TABLE IF EXISTS REG_RESOURCE_PROPERTY_BATCH_TMP;
        
        CREATE TABLE REG_RESOURCE_PROPERTY_BATCH_TMP SELECT REG_PROPERTY_ID FROM REG_RESOURCE_PROPERTY_CHUNK_TMP LIMIT batchSize;

        SELECT row_count() INTO @batchCount;
        
		IF (@batchCount=0 )
        THEN
        LEAVE RRP_BATCH_LOOP;
        END IF;

        IF (backupTables)
        THEN
        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : BACKING UP TABLES REG_RESOURCE_PROPERTY_BACKUP' ;
        END IF;
        INSERT INTO REG_RESOURCE_PROPERTY_BACKUP SELECT RGRP.* FROM  REG_RESOURCE_PROPERTY AS RGRP INNER JOIN  REG_RESOURCE_PROPERTY_BATCH_TMP AS CHK WHERE RGRP.REG_PROPERTY_ID = CHK.REG_PROPERTY_ID;
        COMMIT;
        END IF;

        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : BATCH DELETE STARTED ON REG_RESOURCE_PROPERTY :',  @batchCount;
        END IF;

        DELETE A
        FROM REG_RESOURCE_PROPERTY AS A
        INNER JOIN REG_RESOURCE_PROPERTY_BATCH_TMP AS B
        ON A.REG_PROPERTY_ID = B.REG_PROPERTY_ID;
	
        SELECT row_count() INTO rowCount;
		COMMIT;
        IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
        THEN
        SELECT 'DEBUG : BATCH DELETE FINISHED ON REG_RESOURCE_PROPERTY :', rowCount;
        END IF;

        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : BATCH DELETE STARTED ON REG_RESOURCE_PROPERTY_CHUNK_TMP :',  @batchCount;
        END IF;

        DELETE A
        FROM REG_RESOURCE_PROPERTY_CHUNK_TMP AS A
        INNER JOIN REG_RESOURCE_PROPERTY_BATCH_TMP AS B
        ON A.REG_PROPERTY_ID = B.REG_PROPERTY_ID;
		COMMIT;
        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : BATCH DELETE FINISHED ON REG_RESOURCE_PROPERTY_CHUNK_TMP :';
        END IF;

        IF ((rowCount > 0))
        THEN
            IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : SLEEPING FOR SECONDS :',  sleepTime;
        END IF;
        DO SLEEP(sleepTime);
        END IF;

        UNTIL @batchCount=0 END REPEAT;

UNTIL @chunkCount=0 END REPEAT;

-- ------------------------------------------------------
-- CALCULATING REG_PROPERTY
-- ------------------------------------------------------
IF (enableLog)
THEN
    SELECT 'INFO : CALCULATING DELETE ELIGIBLE ON REG_PROPERTY TABLE .... !';

    IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
    THEN
    SELECT  COUNT(1) into rowcount FROM REG_PROPERTY;
    SELECT 'DEBUG : TOTAL REG_PROPERTY TABLE BEFORE DELETE', rowcount;
    END IF;

    IF (enableLog AND logLevel IN ('TRACE'))
    THEN
	SELECT COUNT(1) into cleaupCount FROM REG_PROPERTY A LEFT JOIN REG_RESOURCE_PROPERTY B ON A.REG_ID = B.REG_PROPERTY_ID
	WHERE A.REG_ID NOT IN (
	SELECT REG_PROPERTY_ID FROM REG_RESOURCE_PROPERTY INNER JOIN REG_RESOURCE ON REG_RESOURCE_PROPERTY.REG_PATH_ID = REG_RESOURCE.REG_PATH_ID 
	UNION 
	SELECT REG_PROPERTY_ID FROM REG_RESOURCE_PROPERTY INNER JOIN REG_RESOURCE ON REG_RESOURCE_PROPERTY.REG_VERSION = REG_RESOURCE.REG_VERSION 
	) AND B.REG_PROPERTY_ID IS NULL;
    SELECT 'TRACE : TOTAL REG_PROPERTY SHOULD BE DELETED ON ', cleaupCount;
    END IF;

    IF (enableLog AND logLevel IN ('TRACE'))
    THEN
    SET rowcount  = (rowcount - cleaupCount);
    SELECT 'TRACE : TOTAL REG_PROPERTY SHOULD BE RETAIN ', rowcount;
    END IF;
END IF;

-- ------------------------------------------
-- PURGE REG_PROPERTY
-- ------------------------------------------

-- RUN UNTILL 
RP_CHUNK_LOOP: REPEAT

DROP TABLE IF EXISTS REG_PROPERTY_CHUNK_TMP;

CREATE TABLE REG_PROPERTY_CHUNK_TMP SELECT A.REG_ID FROM REG_PROPERTY A LEFT JOIN REG_RESOURCE_PROPERTY B ON A.REG_ID = B.REG_PROPERTY_ID
	WHERE A.REG_ID NOT IN (
	SELECT REG_PROPERTY_ID FROM REG_RESOURCE_PROPERTY INNER JOIN REG_RESOURCE ON REG_RESOURCE_PROPERTY.REG_PATH_ID = REG_RESOURCE.REG_PATH_ID 
	UNION 
	SELECT REG_PROPERTY_ID FROM REG_RESOURCE_PROPERTY INNER JOIN REG_RESOURCE ON REG_RESOURCE_PROPERTY.REG_VERSION = REG_RESOURCE.REG_VERSION 
	) AND B.REG_PROPERTY_ID IS NULL LIMIT chunkSize ;
    
    

SELECT row_count() INTO @chunkCount;

IF (@chunkCount<checkCount OR @chunkCount=0)
THEN
IF (@chunkCount<checkCount)
THEN
SELECT 'INFO : EXIT LOOP HENCE DELETE ELIGIBLE COUNT IS LESS THAN CHECK_COUNT DEFINED ', @chunkCount AS 'DELETE ELIGIBLE' , checkCount  AS 'CHECK_COUNT' ;
END IF;
LEAVE RP_CHUNK_LOOP;
END IF;

IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
THEN
SELECT 'DEBUG : REG_PROPERTY_CHUNK_TMP TABLE CREATED WITH ', @chunkCount ;
END IF;

CREATE INDEX REG_PROPERTY_CHUNK_TMP_INDX on REG_PROPERTY_CHUNK_TMP (REG_ID);

COMMIT;

        RP_BATCH_LOOP: REPEAT
       
		DROP TABLE IF EXISTS REG_PROPERTY_BATCH_TMP;

        CREATE TABLE REG_PROPERTY_BATCH_TMP SELECT REG_ID FROM REG_PROPERTY_CHUNK_TMP LIMIT batchSize;

        SELECT row_count() INTO @batchCount;
        
		IF (@batchCount=0 )
		THEN
		LEAVE RP_BATCH_LOOP;
		END IF;

        IF (backupTables)
        THEN
        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : BACKING UP TABLES REG_RESOURCE_PROPERTY_BACKUP AND REG_PROPERTY_BACKUP ' ;
        END IF;

        INSERT INTO REG_PROPERTY_BACKUP SELECT RP.* FROM  REG_PROPERTY AS RP INNER JOIN  REG_PROPERTY_BATCH_TMP AS CHK WHERE RP.REG_ID = CHK.REG_ID;
        COMMIT;
        END IF;

        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : BATCH DELETE STARTED ON REG_PROPERTY :',  @batchCount;
        END IF;

        DELETE A
        FROM REG_PROPERTY AS A
        INNER JOIN REG_PROPERTY_BATCH_TMP AS B
        ON A.REG_ID = B.REG_ID;

        SELECT row_count() INTO rowCount;
        COMMIT;

        IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
        THEN
        SELECT 'DEBUG : BATCH DELETE FINISHED ON REG_PROPERTY :', rowCount;
        END IF;

        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : DELETE STARTED ON REG_PROPERTY_CHUNK_TMP :',  @batchCount;
        END IF;

        DELETE A
        FROM REG_PROPERTY_CHUNK_TMP AS A
        INNER JOIN REG_PROPERTY_BATCH_TMP AS B
        ON A.REG_ID = B.REG_ID;
		COMMIT;
        
        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : DELETE FINISHED ON REG_PROPERTY_CHUNK_TMP :';
        END IF;

        IF ((rowCount > 0))
        THEN
            IF (enableLog AND logLevel IN ('TRACE'))
        THEN
        SELECT 'TRACE : SLEEPING FOR SECONDS :',  sleepTime;
        END IF;
        DO SLEEP(sleepTime);
        END IF;

        UNTIL @batchCount=0 END REPEAT;

UNTIL @chunkCount=0 END REPEAT;


-- CLEANUP ANY EXISTING TEMP TABLES
IF (enableLog AND logLevel IN ('TRACE'))
THEN
SELECT 'TRACE : DROP TEMP TABLES REG_RESOURCE, REG_RESOURCE_PROPERTY_CHUNK_TMP AND REG_PROPERTY_CHUNK_TMP';
DROP TABLE IF EXISTS REG_RESOURCE_CHUNK_TMP;
DROP TABLE IF EXISTS REG_RESOURCE_BATCH_TMP;
DROP TABLE IF EXISTS REG_RESOURCE_PROPERTY_CHUNK_TMP;
DROP TABLE IF EXISTS REG_RESOURCE_PROPERTY_BATCH_TMP;
DROP TABLE IF EXISTS REG_PROPERTY_CHUNK_TMP;
DROP TABLE IF EXISTS REG_PROPERTY_BATCH_TMP;
END IF;


-- ------------------------------------------------------
-- CALCULATING REG_RESOURCE
-- ------------------------------------------------------
IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
THEN
    SELECT  COUNT(1) into rowcount FROM REG_RESOURCE;
    SELECT 'DEBUG : TOTAL REG_RESOURCE TABLE AFTER DELETE', rowcount;
END IF;

-- ------------------------------------------------------
-- CALCULATING REG_RESOURCE_PROPERTY
-- ------------------------------------------------------
IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
THEN
    SELECT  COUNT(1) into rowcount FROM REG_RESOURCE_PROPERTY;
    SELECT 'DEBUG : TOTAL REG_RESOURCE_PROPERTY TABLE AFTER DELETE ', rowcount;

END IF;

-- ------------------------------------------------------
-- CALCULATING REG_PROPERTY
-- ------------------------------------------------------
IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
THEN
    SELECT  COUNT(1) into rowcount FROM REG_PROPERTY;
    SELECT 'DEBUG : TOTAL REG_PROPERTY TABLE AFTER DELETE', rowcount;
END IF;

SET SQL_SAFE_UPDATES = @OLD_SQL_SAFE_UPDATES;

IF (enableLog)
THEN
SELECT 'INFO : WSO2_CONFIRMATION_CODE_CLEANUP TASK COMPLETED .... !';
END IF;


END$$

DELIMITER ;
