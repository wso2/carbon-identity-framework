CREATE OR REPLACE PROCEDURE TOKEN_CLEANUP_SP

BEGIN

DECLARE batchSize INTEGER;
DECLARE cursorLimit INTEGER;
DECLARE backupTables INTEGER;
DECLARE sleepTime FLOAT;
DECLARE safePeriod INTEGER;
DECLARE rowCount INTEGER;
DECLARE enableLog BOOLEAN;
DECLARE logLevel VARCHAR(10);
DECLARE enableAudit INTEGER;
DECLARE deleteTillTime TIMESTAMP;
DECLARE message VARCHAR(32672);
DECLARE status integer default 0;

-- ------------------------------------------
-- CONFIGURABLE ATTRIBUTES
-- ------------------------------------------

SET batchSize = 10000;      -- SET BATCH SIZE FOR AVOID TABLE LOCKS    [DEFAULT : 10000]
SET backupTables = 1;    -- SET IF TOKEN TABLE NEEDS TO BACKUP BEFORE DELETE     [DEFAULT : TRUE]
SET sleepTime = 2;          -- SET SLEEP TIME FOR AVOID TABLE LOCKS     [DEFAULT : 2]
SET safePeriod = 2;         -- SET SAFE PERIOD OF HOURS FOR TOKEN DELETE, SINCE TOKENS COULD BE CASHED    [DEFAULT : 2]
SET rowCount=0;
SET enableLog = TRUE;       -- ENABLE LOGGING [DEFAULT : FALSE]
SET logLevel = 'TRACE';    -- SET LOG LEVELS : TRACE , DEBUG
SET enableAudit = 1;    -- SET TRUE FOR  KEEP TRACK OF ALL THE DELETED TOKENS USING A TABLE    [DEFAULT : TRUE]
SET deleteTillTime = CURRENT TIMESTAMP + (safePeriod) HOUR;

-- ------------------------------------------------------
-- BACKUP IDN_OAUTH2_ACCESS_TOKEN TABLE
-- ------------------------------------------------------
IF backupTables = 1
THEN
    IF EXISTS (SELECT NAME FROM SYSIBM.SYSTABLES WHERE NAME = 'IDN_OAUTH2_ACCESS_TOKEN_BAK')
    THEN
        DROP TABLE IDN_OAUTH2_ACCESS_TOKEN_BAK;
    END IF;
 
    CREATE TABLE IDN_OAUTH2_ACCESS_TOKEN_BAK LIKE IDN_OAUTH2_ACCESS_TOKEN;
    INSERT INTO IDN_OAUTH2_ACCESS_TOKEN_BAK (SELECT * FROM IDN_OAUTH2_ACCESS_TOKEN);

-- ------------------------------------------------------
-- BACKUP IDN_OAUTH2_AUTHORIZATION_CODE TABLE
-- ------------------------------------------------------

    IF EXISTS (SELECT NAME FROM SYSIBM.SYSTABLES WHERE NAME = 'IDN_OAUTH2_AUTHORIZATION_CODE_BAK')
    THEN
        DROP TABLE IDN_OAUTH2_AUTHORIZATION_CODE_BAK;
    END IF;
    
    CREATE TABLE IDN_OAUTH2_AUTHORIZATION_CODE_BAK LIKE IDN_OAUTH2_AUTHORIZATION_CODE;
    INSERT INTO IDN_OAUTH2_AUTHORIZATION_CODE_BAK (SELECT * FROM IDN_OAUTH2_AUTHORIZATION_CODE);
END IF;

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- CREATING IDN_OAUTH2_ACCESS_TOKEN_CLEANUP_AUDITLOG a nd IDN_OAUTH2_AUTHORIZATION_CODE_CLEANUP_AUDITLOGFOR DELETING
--TOKENS and authorization codes
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

IF enableAudit = 1
THEN
    IF NOT EXISTS (SELECT NAME FROM SYSIBM.SYSTABLES WHERE NAME = 'IDN_OAUTH2_ACCESS_TOKEN_CLEANUP_AUDITLOG')
    THEN
          CREATE TABLE IDN_OAUTH2_ACCESS_TOKEN_CLEANUP_AUDITLOG LIKE IDN_OAUTH2_ACCESS_TOKEN;
    END IF;
    
    IF NOT EXISTS (SELECT * FROM SYSIBM.SYSTABLES WHERE NAME = 'IDN_OAUTH2_AUTHORIZATION_CODE_CLEANUP_AUDITLOG')
    THEN
          CREATE TABLE IDN_OAUTH2_AUTHORIZATION_CODE_CLEANUP_AUDITLOG LIKE IDN_OAUTH2_AUTHORIZATION_CODE;
	END IF;
END IF;

-- ------------------------------------------------------
-- BATCH DELETE IDN_OAUTH2_ACCESS_TOKEN
-- ------------------------------------------------------

IF enableAudit = 1
THEN
  INSERT INTO IDN_OAUTH2_ACCESS_TOKEN_CLEANUP_AUDITLOG SELECT * FROM IDN_OAUTH2_ACCESS_TOKEN WHERE TOKEN_STATE IN ('EXPIRED','INACTIVE','REVOKED') OR (TOKEN_STATE='ACTIVE' AND (deleteTillTime > TIME_CREATED + ((VALIDITY_PERIOD/1000)/60) MINUTE) AND (deleteTillTime > REFRESH_TOKEN_TIME_CREATED + ((REFRESH_TOKEN_VALIDITY_PERIOD/1000)/60) MINUTE));
END IF;


REPEAT
IF rowCount > 0
THEN
    CALL dbms_alert.waitone('sleeping',message ,status,sleepTime);
END IF;
DELETE FROM IDN_OAUTH2_ACCESS_TOKEN WHERE TOKEN_STATE IN ('EXPIRED','INACTIVE','REVOKED') OR (TOKEN_STATE='ACTIVE' AND (deleteTillTime > TIME_CREATED + ((VALIDITY_PERIOD/1000)/60) MINUTE) AND (deleteTillTime > REFRESH_TOKEN_TIME_CREATED + ((REFRESH_TOKEN_VALIDITY_PERIOD/1000)/60) MINUTE)) LIMIT batchSize;
GET DIAGNOSTICS rowCount = ROW_COUNT;
UNTIL rowCount=0 END REPEAT;

-- ------------------------------------------------------
-- BATCH DELETE IDN_OAUTH2_AUTHORIZATION_CODE
-- ------------------------------------------------------

IF enableAudit = 1
THEN
  INSERT INTO IDN_OAUTH2_AUTHORIZATION_CODE_CLEANUP_AUDITLOG  SELECT * FROM IDN_OAUTH2_AUTHORIZATION_CODE acode WHERE NOT EXISTS (SELECT * FROM IDN_OAUTH2_ACCESS_TOKEN tok WHERE tok.TOKEN_ID = acode.TOKEN_ID) OR STATE NOT IN ('ACTIVE') OR deleteTillTime > (TIME_CREATED + ((VALIDITY_PERIOD/1000)/60) MINUTE) OR TOKEN_ID IS NULL;
  INSERT INTO IDN_OAUTH2_AUTHORIZATION_CODE_CLEANUP_AUDITLOG  SELECT * FROM IDN_OAUTH2_AUTHORIZATION_CODE where CODE_ID in ( SELECT * FROM ( select CODE_ID FROM IDN_OAUTH2_AUTHORIZATION_CODE code WHERE NOT EXISTS ( SELECT * FROM IDN_OAUTH2_ACCESS_TOKEN token WHERE token.TOKEN_ID = code.TOKEN_ID AND token.TOKEN_STATE = 'ACTIVE') AND code.STATE NOT IN ( 'ACTIVE' ) ) as x) OR  deleteTillTime > (TIME_CREATED + (( VALIDITY_PERIOD / 1000 )/ 60 ) MINUTE );
END IF;

REPEAT
IF rowCount > 0
THEN
    CALL dbms_alert.waitone('sleeping',message ,status,sleepTime);
END IF;
DELETE FROM IDN_OAUTH2_AUTHORIZATION_CODE where CODE_ID in ( SELECT * FROM ( select CODE_ID FROM
IDN_OAUTH2_AUTHORIZATION_CODE code WHERE NOT EXISTS ( SELECT * FROM IDN_OAUTH2_ACCESS_TOKEN token WHERE token.TOKEN_ID = code.TOKEN_ID AND token.TOKEN_STATE = 'ACTIVE') AND code.STATE NOT IN ( 'ACTIVE' ) ) as x) OR deleteTillTime > ( TIME_CREATED + (( VALIDITY_PERIOD / 1000 )/ 60 ) MINUTE );
GET DIAGNOSTICS rowCount = ROW_COUNT;
UNTIL rowCount=0 END REPEAT;

END/
