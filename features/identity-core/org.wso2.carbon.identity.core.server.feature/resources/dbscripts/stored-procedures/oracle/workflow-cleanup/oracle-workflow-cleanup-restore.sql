CREATE OR REPLACE PROCEDURE WSO2_WF_REQ_CLNUP_DT_RESTO_SP IS

rowCount INT;
totalRestored INT := 0;
CURRENT_SCHEMA VARCHAR(20);

-- ------------------------------------------
-- CONFIGURABLE ATTRIBUTES
-- ------------------------------------------
enableLog BOOLEAN := TRUE; -- ENABLE LOGGING [DEFAULT : TRUE]
logLevel VARCHAR(10) := 'TRACE'; -- SET LOG LEVELS : TRACE

BEGIN

SELECT SYS_CONTEXT( 'USERENV', 'CURRENT_SCHEMA' ) INTO CURRENT_SCHEMA FROM DUAL;

IF (enableLog)
THEN
    SELECT COUNT(*) INTO rowCount from ALL_TABLES where OWNER = CURRENT_SCHEMA AND table_name = upper('LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP');
    IF (rowCount = 1) then
        EXECUTE IMMEDIATE 'DROP TABLE LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP';
        COMMIT;
    END if;
    EXECUTE IMMEDIATE 'CREATE TABLE LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP VARCHAR(250) , LOG VARCHAR(250)) NOLOGGING';
    COMMIT;
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''WSO2_WF_REQUEST_CLEANUP_DATA_RESTORATION_SP STARTED .... !'')';
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),'' '')';
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''USING SCHEMA :'||CURRENT_SCHEMA||''')';
    COMMIT;
END IF;

-- ------------------------------------------
-- RESTORE WF_REQUEST TABLE
-- ------------------------------------------
SELECT COUNT(1) INTO rowCount FROM ALL_TABLES where OWNER = CURRENT_SCHEMA AND TABLE_NAME IN ('WF_REQUEST');
IF (rowCount = 1)
THEN
    -- Check if backup table exists
    SELECT COUNT(1) INTO rowCount FROM ALL_TABLES where OWNER = CURRENT_SCHEMA AND TABLE_NAME = 'BAK_WF_REQUEST';
    IF (rowCount = 1)
    THEN
        IF (enableLog AND logLevel IN ('TRACE')) THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''CLEANUP DATA RESTORATION STARTED ON WF_REQUEST TABLE !'')';
            COMMIT;
        END IF;
        
        EXECUTE IMMEDIATE 'INSERT INTO WF_REQUEST SELECT A.* FROM BAK_WF_REQUEST A LEFT JOIN WF_REQUEST B ON A.UUID = B.UUID WHERE B.UUID IS NULL';
        rowCount := sql%Rowcount;
        totalRestored := totalRestored + rowCount;
        
        IF (enableLog) THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''CLEANUP DATA RESTORATION COMPLETED ON WF_REQUEST WITH '||rowCount||''')';
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),'' '')';
            COMMIT;
        END IF;
    ELSE
        IF (enableLog) THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''Backup table BAK_WF_REQUEST not found - skipping'')';
            COMMIT;
        END IF;
    END IF;
END IF;

-- ------------------------------------------
-- RESTORE WF_WORKFLOW_REQUEST_RELATION TABLE
-- ------------------------------------------
SELECT COUNT(1) INTO rowCount FROM ALL_TABLES where OWNER = CURRENT_SCHEMA AND TABLE_NAME IN ('WF_WORKFLOW_REQUEST_RELATION');
IF (rowCount = 1)
THEN
    -- Check if backup table exists
    SELECT COUNT(1) INTO rowCount FROM ALL_TABLES where OWNER = CURRENT_SCHEMA AND TABLE_NAME = 'BAK_WF_WORKFLOW_REQUEST_RELATION';
    IF (rowCount = 1)
    THEN
        IF (enableLog AND logLevel IN ('TRACE')) THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''CLEANUP DATA RESTORATION STARTED ON WF_WORKFLOW_REQUEST_RELATION TABLE !'')';
            COMMIT;
        END IF;
        
        EXECUTE IMMEDIATE 'INSERT INTO WF_WORKFLOW_REQUEST_RELATION SELECT A.* FROM BAK_WF_WORKFLOW_REQUEST_RELATION A LEFT JOIN WF_WORKFLOW_REQUEST_RELATION B ON A.RELATIONSHIP_ID = B.RELATIONSHIP_ID WHERE B.RELATIONSHIP_ID IS NULL';
        rowCount := sql%Rowcount;
        totalRestored := totalRestored + rowCount;
        
        IF (enableLog) THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''CLEANUP DATA RESTORATION COMPLETED ON WF_WORKFLOW_REQUEST_RELATION WITH '||rowCount||''')';
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),'' '')';
            COMMIT;
        END IF;
    ELSE
        IF (enableLog) THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''Backup table BAK_WF_WORKFLOW_REQUEST_RELATION not found - skipping'')';
            COMMIT;
        END IF;
    END IF;
END IF;

-- ------------------------------------------
-- RESTORE WF_WORKFLOW_APPROVAL_RELATION TABLE
-- ------------------------------------------
SELECT COUNT(1) INTO rowCount FROM ALL_TABLES where OWNER = CURRENT_SCHEMA AND TABLE_NAME IN ('WF_WORKFLOW_APPROVAL_RELATION');
IF (rowCount = 1)
THEN
    -- Check if backup table exists
    SELECT COUNT(1) INTO rowCount FROM ALL_TABLES where OWNER = CURRENT_SCHEMA AND TABLE_NAME = 'BAK_WF_WORKFLOW_APPROVAL_RELATION';
    IF (rowCount = 1)
    THEN
        IF (enableLog AND logLevel IN ('TRACE')) THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''CLEANUP DATA RESTORATION STARTED ON WF_WORKFLOW_APPROVAL_RELATION TABLE !'')';
            COMMIT;
        END IF;
        
        EXECUTE IMMEDIATE 'INSERT INTO WF_WORKFLOW_APPROVAL_RELATION SELECT A.* FROM BAK_WF_WORKFLOW_APPROVAL_RELATION A LEFT JOIN WF_WORKFLOW_APPROVAL_RELATION B ON A.TASK_ID = B.TASK_ID AND A.APPROVER_TYPE = B.APPROVER_TYPE AND A.APPROVER_NAME = B.APPROVER_NAME WHERE B.TASK_ID IS NULL';
        rowCount := sql%Rowcount;
        totalRestored := totalRestored + rowCount;
        
        IF (enableLog) THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''CLEANUP DATA RESTORATION COMPLETED ON WF_WORKFLOW_APPROVAL_RELATION WITH '||rowCount||''')';
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),'' '')';
            COMMIT;
        END IF;
    ELSE
        IF (enableLog) THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''Backup table BAK_WF_WORKFLOW_APPROVAL_RELATION not found - skipping'')';
            COMMIT;
        END IF;
    END IF;
END IF;

-- ------------------------------------------
-- COMPLETION SUMMARY
-- ------------------------------------------
IF (enableLog)
THEN
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''Total records restored: '||totalRestored||''')';
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_CLN_DT_RESTR_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''WSO2_WF_REQUEST_CLEANUP_DATA_RESTORATION_SP COMPLETED .... !'')';
    COMMIT;
END IF;

END;

/

-- ------------------------------------------
-- UTILITY PROCEDURE TO DROP BACKUP TABLES
-- ------------------------------------------
CREATE OR REPLACE PROCEDURE WSO2_WF_REQ_DROP_BACKUP_TABLES_SP IS

CURRENT_SCHEMA VARCHAR(20);
tablecount INT;
enableLog BOOLEAN := TRUE;

BEGIN

SELECT SYS_CONTEXT( 'USERENV', 'CURRENT_SCHEMA' ) INTO CURRENT_SCHEMA FROM DUAL;

IF (enableLog)
THEN
    SELECT COUNT(*) INTO tablecount from ALL_TABLES where OWNER = CURRENT_SCHEMA AND table_name = upper('LOG_WSO2_WF_REQ_DROP_BCK_TBL_SP');
    IF (tablecount = 1) then
        EXECUTE IMMEDIATE 'DROP TABLE LOG_WSO2_WF_REQ_DROP_BCK_TBL_SP';
        COMMIT;
    END if;
    EXECUTE IMMEDIATE 'CREATE TABLE LOG_WSO2_WF_REQ_DROP_BCK_TBL_SP (TIMESTAMP VARCHAR(250) , LOG VARCHAR(250)) NOLOGGING';
    COMMIT;
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_DROP_BCK_TBL_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''DROPPING WF BACKUP TABLES...'')';
    COMMIT;
END IF;

-- Drop each backup table if it exists
SELECT COUNT(1) INTO tablecount FROM ALL_TABLES 
WHERE OWNER = CURRENT_SCHEMA AND TABLE_NAME = 'BAK_WF_REQUEST';
IF (tablecount = 1) THEN
    EXECUTE IMMEDIATE 'DROP TABLE BAK_WF_REQUEST';
    IF (enableLog) THEN
        EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_DROP_BCK_TBL_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''Dropped table: BAK_WF_REQUEST'')';
        COMMIT;
    END IF;
END IF;

SELECT COUNT(1) INTO tablecount FROM ALL_TABLES 
WHERE OWNER = CURRENT_SCHEMA AND TABLE_NAME = 'BAK_WF_WORKFLOW_REQUEST_RELATION';
IF (tablecount = 1) THEN
    EXECUTE IMMEDIATE 'DROP TABLE BAK_WF_WORKFLOW_REQUEST_RELATION';
    IF (enableLog) THEN
        EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_DROP_BCK_TBL_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''Dropped table: BAK_WF_WORKFLOW_REQUEST_RELATION'')';
        COMMIT;
    END IF;
END IF;

SELECT COUNT(1) INTO tablecount FROM ALL_TABLES 
WHERE OWNER = CURRENT_SCHEMA AND TABLE_NAME = 'BAK_WF_WORKFLOW_APPROVAL_RELATION';
IF (tablecount = 1) THEN
    EXECUTE IMMEDIATE 'DROP TABLE BAK_WF_WORKFLOW_APPROVAL_RELATION';
    IF (enableLog) THEN
        EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_DROP_BCK_TBL_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''Dropped table: BAK_WF_WORKFLOW_APPROVAL_RELATION'')';
        COMMIT;
    END IF;
END IF;

IF (enableLog) THEN
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQ_DROP_BCK_TBL_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''BACKUP TABLES DROPPED SUCCESSFULLY!'')';
    COMMIT;
END IF;

END;

/
