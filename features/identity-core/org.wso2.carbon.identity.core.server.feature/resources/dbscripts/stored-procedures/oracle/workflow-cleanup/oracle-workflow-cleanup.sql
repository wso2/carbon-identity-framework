CREATE OR REPLACE PROCEDURE WSO2_WF_REQUEST_CLEANUP_SP IS

-- ------------------------------------------
-- VARIABLE DECLARATION
-- ------------------------------------------

systime TIMESTAMP := systimestamp;
utcTime TIMESTAMP := sys_extract_utc(systimestamp);
deleteCount INT := 0;
chunkCount INT := 0;
batchCount INT := 0;
ROWCOUNT INT := 0;
cleanupCount INT := 0;
totalDeleted INT := 0;
CURRENT_SCHEMA VARCHAR(20);
backupTable VARCHAR(50);
cursorTable VARCHAR(50);

CURSOR backupTablesCursor IS
SELECT TABLE_NAME FROM ALL_TABLES WHERE OWNER = CURRENT_SCHEMA AND
TABLE_NAME IN ('WF_REQUEST', 'WF_WORKFLOW_REQUEST_RELATION', 'WF_WORKFLOW_APPROVAL_RELATION');

-- ------------------------------------------
-- CONFIGURABLE ATTRIBUTES
-- ------------------------------------------

batchSize INT := 10000; -- BATCH WISE DELETE [DEFAULT : 10000]
chunkSize INT := 500000; -- CHUNK WISE DELETE FOR LARGE TABLES [DEFAULT : 500000]
checkCount INT := 100; -- SET CHECK COUNT FOR FINISH CLEANUP SCRIPT [DEFAULT : 100]
backupTables BOOLEAN := FALSE;  -- SET IF WF TABLES NEED TO BE BACKED-UP BEFORE DELETE [DEFAULT : FALSE]
sleepTime FLOAT := 2;  -- SET SLEEP TIME FOR AVOID TABLE LOCKS [DEFAULT : 2]
cleanUpRequestsTimeLimit INT := 60; -- SET SAFE PERIOD IN DAYS FOR REQUEST DELETE [DEFAULT : 60 days (2 months)]
deleteTimeLimit TIMESTAMP := utcTime - cleanUpRequestsTimeLimit; -- SET CURRENT TIME - cleanUpRequestsTimeLimit FOR BEGIN THE REQUEST DELETE
enableLog BOOLEAN := TRUE ; -- ENABLE LOGGING [DEFAULT : TRUE]
logLevel VARCHAR(10) := 'TRACE'; -- SET LOG LEVELS : TRACE , DEBUG
enableAudit BOOLEAN := FALSE; -- SET TRUE FOR KEEP TRACK OF ALL THE DELETED REQUESTS [DEFAULT : FALSE]

BEGIN

-- ------------------------------------------------------
-- CREATING LOG TABLE
-- ------------------------------------------------------

SELECT SYS_CONTEXT( 'USERENV', 'CURRENT_SCHEMA' ) INTO CURRENT_SCHEMA FROM DUAL;

IF (enableLog)
THEN
    SELECT COUNT(*) INTO ROWCOUNT from ALL_TABLES where OWNER = CURRENT_SCHEMA AND table_name = upper('LOG_WSO2_WF_REQUEST_CLEANUP_SP');
    IF (ROWCOUNT = 1) then
        EXECUTE IMMEDIATE 'DROP TABLE LOG_WSO2_WF_REQUEST_CLEANUP_SP';
        COMMIT;
    END if;
    EXECUTE IMMEDIATE 'CREATE TABLE LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP VARCHAR(250) , LOG VARCHAR(250)) NOLOGGING';
    COMMIT;
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''WSO2_WF_REQUEST_CLEANUP_SP STARTED .... !'')';
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),'' '')';
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''USING SCHEMA :'||CURRENT_SCHEMA||''')';
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''Cleanup Period: '||cleanUpRequestsTimeLimit||' days'')';
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''Target Statuses: APPROVED, REJECTED, FAILED, ABORTED'')';
    COMMIT;
END IF;

IF (enableAudit)
THEN
    backupTables := TRUE;    -- BACKUP TABLES IS REQUIRED TO BE TRUE, HENCE THE AUDIT IS ENABLED.
END IF;

-- ------------------------------------------------------
-- BACKUP TABLES
-- ------------------------------------------------------

IF (backupTables)
THEN
    IF (enableLog)
    THEN
        EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''TABLE BACKUP STARTED ... !'')';
        COMMIT;
    END IF;

    FOR cursorTable IN backupTablesCursor
    LOOP
        SELECT REPLACE(''||cursorTable.TABLE_NAME||'','WF_','BAK_WF_') INTO backupTable FROM DUAL;

        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''BACKING UP '||cursorTable.TABLE_NAME||' INTO '||backupTable||' STARTED '')';
            COMMIT;
        END IF;

        SELECT COUNT(*) INTO ROWCOUNT from ALL_TABLES where OWNER = CURRENT_SCHEMA AND table_name = upper(backupTable);
        IF (ROWCOUNT = 1)
        THEN
            EXECUTE IMMEDIATE 'DROP TABLE '||backupTable;
            COMMIT;
        END if;

        -- Create backup only for records that will be deleted
        IF cursorTable.TABLE_NAME = 'WF_REQUEST' THEN
            EXECUTE IMMEDIATE
                'CREATE TABLE ' || backupTable || ' AS
                 SELECT * FROM ' || cursorTable.TABLE_NAME || '
                 WHERE STATUS IN (''APPROVED'', ''REJECTED'', ''FAILED'', ''DELETED'', ''ABORTED'')
                 AND UPDATED_AT < TO_TIMESTAMP(''' ||
                 TO_CHAR(deleteTimeLimit, 'YYYY-MM-DD HH24:MI:SS.FF') || ''', ''YYYY-MM-DD HH24:MI:SS.FF'')';

        ELSIF cursorTable.TABLE_NAME = 'WF_WORKFLOW_REQUEST_RELATION' THEN
            EXECUTE IMMEDIATE
                'CREATE TABLE ' || backupTable || ' AS
                 SELECT t.* FROM ' || cursorTable.TABLE_NAME || ' t
                 WHERE EXISTS (
                     SELECT 1 FROM WF_REQUEST r
                     WHERE r.UUID = t.REQUEST_ID
                     AND r.STATUS IN (''APPROVED'', ''REJECTED'', ''FAILED'', ''DELETED'', ''ABORTED'')
                     AND r.UPDATED_AT < TO_TIMESTAMP(''' ||
                     TO_CHAR(deleteTimeLimit, 'YYYY-MM-DD HH24:MI:SS.FF') || ''', ''YYYY-MM-DD HH24:MI:SS.FF''))';

        ELSIF cursorTable.TABLE_NAME = 'WF_WORKFLOW_APPROVAL_RELATION' THEN
            EXECUTE IMMEDIATE
                'CREATE TABLE ' || backupTable || ' AS
                 SELECT t.* FROM ' || cursorTable.TABLE_NAME || ' t
                 WHERE EXISTS (
                     SELECT 1 FROM WF_REQUEST r
                     WHERE r.UUID = t.EVENT_ID
                     AND r.STATUS IN (''APPROVED'', ''REJECTED'', ''FAILED'', ''DELETED'', ''ABORTED'')
                     AND r.UPDATED_AT < TO_TIMESTAMP(''' ||
                     TO_CHAR(deleteTimeLimit, 'YYYY-MM-DD HH24:MI:SS.FF') || ''', ''YYYY-MM-DD HH24:MI:SS.FF''))';
        END IF;
        
        ROWCOUNT := sql%rowcount;
        COMMIT;

        IF (enableLog AND logLevel IN ('TRACE','DEBUG'))
        THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''BACKING UP '||cursorTable.TABLE_NAME||' COMPLETED WITH : '||ROWCOUNT||''')';
            COMMIT;
        END IF;

    END LOOP;
    
    IF (enableLog)
    THEN
        EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),'' '')';
        COMMIT;
    END IF;
END IF;

-- ------------------------------------------------------
-- CREATING AUDIT TABLES FOR WORKFLOW REQUESTS DELETION
-- ------------------------------------------------------
IF (enableAudit)
THEN
    SELECT count(1) into ROWCOUNT FROM ALL_TABLES where OWNER = CURRENT_SCHEMA AND table_name = 'ADT_WF_REQUEST';
    IF (ROWCOUNT = 0)
    THEN
        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''CREATING AUDIT TABLE ADT_WF_REQUEST .. ! '')';
            COMMIT;
        END IF;
        EXECUTE IMMEDIATE 'CREATE TABLE ADT_WF_REQUEST as (SELECT * FROM WF_REQUEST WHERE 1 = 2)';
        COMMIT;
    ELSE
        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''USING AUDIT TABLE ADT_WF_REQUEST'')';
            COMMIT;
        END IF;
    END IF;

    IF (enableLog AND logLevel IN ('TRACE'))
    THEN
        EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),'' '')';
        COMMIT;
    END IF;
END IF;

-- ------------------------------------------------------
-- CALCULATING WORKFLOW REQUESTS TYPES
-- ------------------------------------------------------
IF (enableLog)
THEN
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''CALCULATING WORKFLOW REQUESTS IN WF_REQUEST TABLE .... !'')';
    COMMIT;

    IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
    THEN
        SELECT COUNT(1) INTO ROWCOUNT FROM WF_REQUEST;
        EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''TOTAL REQUESTS ON WF_REQUEST TABLE BEFORE DELETE : '||ROWCOUNT||''')';
        COMMIT;
    END IF;

    IF (enableLog AND logLevel IN ('TRACE'))
    THEN
        SELECT COUNT(1) INTO cleanupCount FROM WF_REQUEST 
        WHERE STATUS IN ('APPROVED','REJECTED','FAILED','DELETED','ABORTED') 
        AND UPDATED_AT < deleteTimeLimit;
        EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''TOTAL REQUESTS SHOULD BE DELETED FROM WF_REQUEST : '||cleanupCount||''')';
        COMMIT;
    END IF;

    IF (enableLog AND logLevel IN ('TRACE'))
    THEN
        ROWCOUNT := (ROWCOUNT - cleanupCount);
        EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''TOTAL REQUESTS SHOULD BE RETAIN IN WF_REQUEST : '||ROWCOUNT||''')';
        COMMIT;
    END IF;
END IF;

-- ------------------------------------------------------
-- BATCH DELETE WF_REQUEST
-- ------------------------------------------------------
IF (enableLog)
THEN
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),'' '')';
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''REQUEST DELETE ON WF_REQUEST TABLE STARTED ... ! '')';
    COMMIT;
END IF;

LOOP
    SELECT COUNT(*) INTO ROWCOUNT from ALL_TABLES where OWNER = CURRENT_SCHEMA AND table_name = upper('CHUNK_WF_REQUEST');
    IF (ROWCOUNT = 1) then
        EXECUTE IMMEDIATE 'DROP TABLE CHUNK_WF_REQUEST';
        COMMIT;
    END if;

    EXECUTE IMMEDIATE 'CREATE TABLE CHUNK_WF_REQUEST (ROW_ID rowid,CONSTRAINT CHUNK_WF_REQUEST_PRI PRIMARY KEY (ROW_ID)) NOLOGGING';
    COMMIT;
    
    EXECUTE IMMEDIATE 'INSERT /*+ APPEND */ INTO CHUNK_WF_REQUEST (ROW_ID) 
                      SELECT rowid FROM WF_REQUEST 
                      WHERE rownum <= :chkSize 
                      AND STATUS IN (''APPROVED'',''REJECTED'',''FAILED'',''DELETED'',''ABORTED'') 
                      AND UPDATED_AT < :delTimeLimit' USING chunkSize, deleteTimeLimit;
    chunkCount := sql%Rowcount;
    COMMIT;

    EXIT WHEN chunkCount < checkCount;

    IF (enableLog AND logLevel IN ('TRACE'))
    THEN
        EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''CHUNK TABLE CHUNK_WF_REQUEST CREATED WITH : '||chunkCount||''')';
        COMMIT;
    END IF;

    IF (enableAudit)
    THEN
        EXECUTE IMMEDIATE 'INSERT INTO ADT_WF_REQUEST SELECT REQ.* FROM WF_REQUEST REQ , CHUNK_WF_REQUEST CHK WHERE REQ.ROWID=CHK.ROW_ID';
        COMMIT;
    END IF;

    LOOP
        SELECT COUNT(*) INTO ROWCOUNT from ALL_TABLES where OWNER = CURRENT_SCHEMA AND table_name = upper('BATCH_WF_REQUEST');
        IF (ROWCOUNT = 1) then
            EXECUTE IMMEDIATE 'DROP TABLE BATCH_WF_REQUEST';
            COMMIT;
        END IF;

        EXECUTE IMMEDIATE 'CREATE TABLE BATCH_WF_REQUEST (ROW_ID rowid,CONSTRAINT BATCH_WF_REQUEST_PRI PRIMARY KEY (ROW_ID)) NOLOGGING';
        COMMIT;

        EXECUTE IMMEDIATE 'INSERT /*+ APPEND */ INTO BATCH_WF_REQUEST (ROW_ID) SELECT ROW_ID FROM CHUNK_WF_REQUEST WHERE rownum <= '||batchSize||'';
        batchCount := sql%rowcount;
        COMMIT;

        EXIT WHEN batchCount = 0;

        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''BATCH DELETE START ON TABLE WF_REQUEST WITH : '||batchCount||''')';
            COMMIT;
        END IF;

        IF ((batchCount > 0))
        THEN
            EXECUTE IMMEDIATE 'DELETE WF_REQUEST where rowid in (select ROW_ID from BATCH_WF_REQUEST)';
            deleteCount := sql%rowcount;
            totalDeleted := totalDeleted + deleteCount;
            COMMIT;
        END IF;

        IF (enableLog)
        THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''BATCH DELETE FINISHED ON WF_REQUEST WITH : '||deleteCount||''')';
            COMMIT;
        END IF;

        EXECUTE IMMEDIATE 'DELETE CHUNK_WF_REQUEST WHERE ROW_ID in (select ROW_ID from BATCH_WF_REQUEST)';
        COMMIT;

        IF (enableLog AND logLevel IN ('TRACE'))
        THEN
            EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''DELETED BATCH ON CHUNK_WF_REQUEST !'')';
            COMMIT;
        END IF;

        IF ((deleteCount > 0))
        THEN
            IF (enableLog AND logLevel IN ('TRACE'))
            THEN
                EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''SLEEPING ...'')';
                COMMIT;
            END IF;
            DBMS_LOCK.SLEEP(sleepTime);
        END IF;
    END LOOP;
END LOOP;

IF (enableLog)
THEN
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''BATCH DELETE ON WF_REQUEST COMPLETED .... !'')';
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''Total WF_REQUEST records deleted: '||totalDeleted||''')';
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),'' '')';
END IF;
COMMIT;

-- Cleanup temporary tables
SELECT COUNT(*) INTO ROWCOUNT from ALL_TABLES where OWNER = CURRENT_SCHEMA AND table_name = upper('CHUNK_WF_REQUEST');
IF (ROWCOUNT = 1) then
    EXECUTE IMMEDIATE 'DROP TABLE CHUNK_WF_REQUEST';
    COMMIT;
END if;

SELECT COUNT(*) INTO ROWCOUNT from ALL_TABLES where OWNER = CURRENT_SCHEMA AND table_name = upper('BATCH_WF_REQUEST');
IF (ROWCOUNT = 1) then
    EXECUTE IMMEDIATE 'DROP TABLE BATCH_WF_REQUEST';
    COMMIT;
END if;

IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
THEN
    SELECT COUNT(1) INTO ROWCOUNT FROM WF_REQUEST;
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''TOTAL REQUESTS ON WF_REQUEST TABLE AFTER DELETE :'||ROWCOUNT||''')';
    COMMIT;

    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),'' '')';
    COMMIT;
END IF;

IF (enableLog AND logLevel IN ('DEBUG','TRACE'))
THEN
    EXECUTE IMMEDIATE 'INSERT INTO LOG_WSO2_WF_REQUEST_CLEANUP_SP (TIMESTAMP,LOG) VALUES (TO_CHAR( SYSTIMESTAMP, ''DD.MM.YYYY HH24:MI:SS:FF4''),''WSO2_WF_REQUEST_CLEANUP_SP COMPLETED .... !'')';
    COMMIT;
END IF;

END;
